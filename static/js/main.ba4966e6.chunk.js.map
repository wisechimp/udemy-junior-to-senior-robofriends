{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/Header.js","components/Scroll.js","components/SearchBox.js","constants.js","containers/App.js","actions.js","reducer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","src","alt","CardList","robots","map","user","i","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Header","nextProps","nextState","Scroll","style","overflowY","border","height","SearchBox","searchfield","searchChange","type","placeholder","onChange","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","requestRobots","searchRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba4966e6.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\n\r\n// We can destructure right at the top which saves us passing props then destructuring\r\nconst Card = ({ id, name, email }) => {\r\n\r\n  return (\r\n    // Everything goes in the div as we can only return one element\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?200x200'`} alt={`${name}`}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\n\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n  return (\r\n    <>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card \r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n            />\r\n          )\r\n        })\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CardList","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  // This is like the try-catch block in js\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oops, there's been an error.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React, { Component } from 'react'\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false\r\n  }\r\n\r\n  render() {\r\n    return <h1 className='f1'>Robofriends</h1>\r\n  }\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport CardList from '../components/CardList'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport Header from '../components/Header'\r\nimport Scroll from '../components/Scroll'\r\nimport SearchBox from '../components/SearchBox'\r\n\r\nimport { requestRobots, setSearchField } from '../actions'\r\n\r\nimport './App.css'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n    searchField: state.searchRobots.searchField\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component { \r\n  componentDidMount() {\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n\r\n    return isPending ?\r\n      <h1>Loading...</h1> : \r\n      (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED \r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({\r\n    type: REQUEST_ROBOTS_PENDING\r\n  })\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n      }))\r\n      .catch(error => dispatch({\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: error\r\n      }))\r\n}","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true })\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false })\r\n    default:\r\n      return state\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons'\r\n\r\nimport App from './containers/App'\r\nimport { searchRobots, requestRobots } from './reducer'\r\nimport './index.css';\r\n\r\nconst logger = createLogger()\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}