{"version":3,"sources":["reportWebVitals.js","serviceWorkerRegistration.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/Header.js","components/Scroll.js","components/SearchBox.js","constants.js","containers/App.js","actions.js","reducer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","src","alt","width","CardList","robots","map","user","i","ErrorBoundary","props","hasError","info","this","setState","children","Component","Header","nextProps","nextState","Scroll","style","overflowY","border","height","SearchBox","searchfield","searchChange","type","placeholder","onChange","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","requestRobots","searchRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.62815fbc.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\n// We can destructure right at the top which saves us passing props then destructuring\r\nconst Card = ({ id, name, email }) => {\r\n\r\n  return (\r\n    // Everything goes in the div as we can only return one element\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt={`${name}`} width=\"200px\"/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\n\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n  return (\r\n    <>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card \r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n            />\r\n          )\r\n        })\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CardList","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  // This is like the try-catch block in js\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oops, there's been an error.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React, { Component } from 'react'\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false\r\n  }\r\n\r\n  render() {\r\n    return <h1 className='f1'>Robofriends</h1>\r\n  }\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport CardList from '../components/CardList'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport Header from '../components/Header'\r\nimport Scroll from '../components/Scroll'\r\nimport SearchBox from '../components/SearchBox'\r\n\r\nimport { requestRobots, setSearchField } from '../actions'\r\n\r\nimport './App.css'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n    searchField: state.searchRobots.searchField\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component { \r\n  componentDidMount() {\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n\r\n    return isPending ?\r\n      <h1>Loading...</h1> : \r\n      (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED \r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({\r\n    type: REQUEST_ROBOTS_PENDING\r\n  })\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n      }))\r\n      .catch(error => dispatch({\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: error\r\n      }))\r\n}","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true })\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false })\r\n    default:\r\n      return state\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport 'tachyons'\r\n\r\nimport App from './containers/App'\r\nimport { searchRobots, requestRobots } from './reducer'\r\nimport './index.css';\r\n\r\nconst logger = createLogger()\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}